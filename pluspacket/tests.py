import unittest
import packet

class TestDummy(unittest.TestCase):

	def test_dummy(self):
		self.assertEqual(True, True)


class TestBasicPacket(unittest.TestCase):

	def test_too_small_packet(self):
		"""
		Tests if too small packets are rejected due to the
		minimum length requirement.
		"""

		with self.assertRaises(ValueError):
			packet.parse_packet([10])


	def test_get_cat(self):
		"""
		Tests if the CAT is read correctly.
		"""

		buf = bytes([	0x00, 0x00, 0x00, 0x00,
							0x01, 0x02, 0x03, 0x04, 
							0x05, 0x06, 0x07, 0x08])

		expected = 0x0102030405060708

		self.assertEqual(packet.get_cat(buf), expected)


	def test_get_magic(self):
		"""
		Tests if the Magic is read correctly.
		"""

		buf = bytes([	0x12, 0x23, 0x34, 0x81])

		expected = 0x1223348

		self.assertEqual(packet.get_magic(buf), expected)


	def test_get_flags(self):
		"""
		Tests if the Flags are read correctly.
		"""

		buf = bytes([	0x12, 0x23, 0x34, 0x8B])

		expected = 0xB

		self.assertEqual(packet.get_flags(buf), expected)


	def test_get_psn(self):
		"""
		Tests if the PSN is read correctly.
		"""

		buf = bytes([	0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0x12, 0x34, 0x56, 0x78])

		expected = 0x12345678

		self.assertEqual(packet.get_psn(buf), expected)


	def test_get_pse(self):
		"""
		Tests if the PSE is read correctly.
		"""

		buf = bytes([	0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0x12, 0x34, 0x56, 0x78])

		expected = 0x12345678

		self.assertEqual(packet.get_pse(buf), expected)


	def test_get_lrsx(self):
		"""
		Tests if get_l/r/s/x work correctly.
		"""

		buf = bytes([	0x00, 0x00, 0x00, 0xB])
		
		self.assertEqual(packet.get_l(buf), True)
		self.assertEqual(packet.get_r(buf), False)
		self.assertEqual(packet.get_s(buf), True)
		self.assertEqual(packet.get_x(buf), True)

		buf = bytes([	0x00, 0x00, 0x00, 0x04])

		self.assertEqual(packet.get_l(buf), not True)
		self.assertEqual(packet.get_r(buf), not False)
		self.assertEqual(packet.get_s(buf), not True)
		self.assertEqual(packet.get_x(buf), not True)


	def test_detect_plus(self):
		"""
		Tests if detect_plus works correctly.
		"""

		# magic := 0xd8007ff
		buf = bytes([	0xD8, 0x00, 0x7F, 0xFB,
							0x11, 0x11, 0x11, 0x11,
							0x11, 0x11, 0x11, 0x11,
							0x22, 0x22, 0x22, 0x22,
							0x33, 0x33, 0x33, 0x33])

		self.assertEqual(packet.detect_plus(buf), True)

		buf = bytes([	0xD7, 0x00, 0x7F, 0xFB,
							0x11, 0x11, 0x11, 0x11,
							0x11, 0x11, 0x11, 0x11,
							0x22, 0x22, 0x22, 0x22,
							0x33, 0x33, 0x33, 0x33])

		self.assertEqual(packet.detect_plus(buf), False)

		buf = bytes([	0xD8, 0x00, 0x7F, 0xFB,
							0x11, 0x11, 0x11, 0x11,
							0x11, 0x11, 0x11,
							0x22, 0x22, 0x22, 0x22,
							0x33, 0x33, 0x33, 0x33])

		self.assertEqual(packet.detect_plus(buf), False)


	def test_detect_plus_in_udp(self):
		"""
		Tests if detect_plus_in_udp works correctly.
		"""

		buf = bytes([	0x00, 0x00, 0x00, 0x00,
							0x00, 0x00, 0x00, 0x00,
							0xD8, 0x00, 0x7F, 0xFB,
							0x11, 0x11, 0x11, 0x11,
							0x11, 0x11, 0x11, 0x11,
							0x22, 0x22, 0x22, 0x22,
							0x33, 0x33, 0x33, 0x33])

		self.assertEqual(packet.detect_plus_in_udp(buf), True)

		buf = bytes([	0xD8, 0x00, 0x7F, 0xFB,
							0x11, 0x11, 0x11, 0x11,
							0x11, 0x11, 0x11, 0x11,
							0x22, 0x22, 0x22, 0x22,
							0x33, 0x33, 0x33, 0x33])

		self.assertEqual(packet.detect_plus_in_udp(buf), False)

		buf = bytes([	0x00, 0x00, 0x00, 0x00])

		with self.assertRaises(ValueError):
			self.assertEqual(packet.detect_plus_in_udp(buf), False)


	def test_parse_packet_1(self):
		buf = bytes([
			0xD8, 0x00, 0x7F, 0xFA, #magic + flags
			0x12, 0x34, 0x56, 0x78, #cat
			0x21, 0x43, 0x65, 0x87,
			0x87, 0x65, 0x43, 0x21, #psn
			0x11, 0x22, 0x33, 0x44, #pse
			0x01, 0x02, 0x03, 0x04, #payload
			0x10, 0x20, 0x30, 0x40, #payload
			0x99, 0x90, 0x99, 0x90])

		l = True
		r = False
		s = True

		cat = 0x1234567821436587
		psn = 0x87654321
		pse = 0x11223344

		payload = bytes([
			0x01, 0x02, 0x03, 0x04,
			0x10, 0x20, 0x30, 0x40,
			0x99, 0x90, 0x99, 0x90])

		plus_packet = packet.parse_packet(buf)

		self.assertEqual(plus_packet.l, l)
		self.assertEqual(plus_packet.r, r)
		self.assertEqual(plus_packet.s, s)
		self.assertEqual(plus_packet.x, False)
		self.assertEqual(plus_packet.cat, cat)
		self.assertEqual(plus_packet.psn, psn)
		self.assertEqual(plus_packet.pse, pse)
		self.assertEqual(plus_packet.payload, payload)
		self.assertEqual(plus_packet.is_valid(), True)


class TestExtendedPacket(unittest.TestCase):
	pass

class TestSerialize(unittest.TestCase):

	def test_serialize_1(self):
		buf = bytes([
			0xD8, 0x00, 0x7F, 0xFA, #magic + flags
			0x12, 0x34, 0x56, 0x78, #cat
			0x21, 0x43, 0x65, 0x87,
			0x87, 0x65, 0x43, 0x21, #psn
			0x11, 0x22, 0x33, 0x44, #pse
			0x01, 0x02, 0x03, 0x04, #payload
			0x10, 0x20, 0x30, 0x40, #payload
			0x99, 0x90, 0x99, 0x90])

		l = True
		r = False
		s = True

		cat = 0x1234567821436587
		psn = 0x87654321
		pse = 0x11223344

		payload = bytes([
			0x01, 0x02, 0x03, 0x04,
			0x10, 0x20, 0x30, 0x40,
			0x99, 0x90, 0x99, 0x90])

		plus_packet = packet.new_basic_packet(l, r, s, cat, psn, pse, payload)

		self.assertEqual(plus_packet.to_bytes(), buf)
		

if __name__ == "__main__":
	unittest.main()
